--- vendor/github.com/elastic/go-libaudit/audit.go.ori  2018-10-24 10:59:16.873149000 +0000
+++ vendor/github.com/elastic/go-libaudit/audit.go      2018-10-24 11:06:55.819291000 +0000
@@ -30,6 +30,10 @@
        "github.com/elastic/go-libaudit/auparse"
 )

+var (
+       byteOrder = GetEndian()
+)
+
 const (
        // AuditMessageMaxLength is the maximum length of an audit message (data
        // portion of a NetlinkMessage).
@@ -488,7 +492,7 @@

        r := bytes.NewReader(buf)
        m := syscall.NetlinkMessage{}
-       if err := binary.Read(r, binary.LittleEndian, &m.Header); err != nil {
+       if err := binary.Read(r, byteOrder, &m.Header); err != nil {
                return nil, err
        }
        m.Data = buf[syscall.NLMSG_HDRLEN:]
@@ -533,7 +537,7 @@
 func (s AuditStatus) toWireFormat() []byte {
        buf := bytes.NewBuffer(make([]byte, sizeofAuditStatus))
        buf.Reset()
-       if err := binary.Write(buf, binary.LittleEndian, s); err != nil {
+       if err := binary.Write(buf, byteOrder, s); err != nil {
                // This never returns an error.
                panic(err)
        }
@@ -568,7 +572,7 @@
                        return nil
                }

-               if err := binary.Read(r, binary.LittleEndian, f); err != nil {
+               if err := binary.Read(r, byteOrder, f); err != nil {
                        return err
                }
        }
