--- vendor/github.com/elastic/go-libaudit/netlink.go.ori        2018-10-24 12:04:55.223093000 +0000
+++ vendor/github.com/elastic/go-libaudit/netlink.go    2018-10-24 12:07:14.721158000 +0000
@@ -17,7 +17,6 @@
 package libaudit

 import (
-       "encoding/binary"
        "fmt"
        "io"
        "os"
@@ -139,11 +138,11 @@
 func serialize(msg syscall.NetlinkMessage) []byte {
        msg.Header.Len = uint32(syscall.SizeofNlMsghdr + len(msg.Data))
        b := make([]byte, msg.Header.Len)
-       binary.LittleEndian.PutUint32(b[0:4], msg.Header.Len)
-       binary.LittleEndian.PutUint16(b[4:6], msg.Header.Type)
-       binary.LittleEndian.PutUint16(b[6:8], msg.Header.Flags)
-       binary.LittleEndian.PutUint32(b[8:12], msg.Header.Seq)
-       binary.LittleEndian.PutUint32(b[12:16], msg.Header.Pid)
+       byteOrder.PutUint32(b[0:4], msg.Header.Len)
+       byteOrder.PutUint16(b[4:6], msg.Header.Type)
+       byteOrder.PutUint16(b[6:8], msg.Header.Flags)
+       byteOrder.PutUint32(b[8:12], msg.Header.Seq)
+       byteOrder.PutUint32(b[12:16], msg.Header.Pid)
        copy(b[16:], msg.Data)
        return b
 }
@@ -202,7 +201,7 @@
 // describing the problem will be returned.
 func ParseNetlinkError(netlinkData []byte) error {
        if len(netlinkData) >= 4 {
-               errno := -binary.LittleEndian.Uint32(netlinkData[:4])
+               errno := -GetEndian().Uint32(netlinkData[:4])
                if errno == 0 {
                        return nil
                }
