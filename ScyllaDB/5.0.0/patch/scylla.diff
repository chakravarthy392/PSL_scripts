diff --git a/alternator/auth.cc b/alternator/auth.cc
index cbcf153..0aa1343 100644
--- a/alternator/auth.cc
+++ b/alternator/auth.cc
@@ -10,6 +10,7 @@
 #include "log.hh"
 #include <string>
 #include <string_view>
+#include <gnutls/gnutls.h>
 #include <gnutls/crypto.h>
 #include "hashers.hh"
 #include "bytes.hh"
diff --git a/configure.py b/configure.py
index 5b29c95..17a804c 100755
--- a/configure.py
+++ b/configure.py
@@ -1318,6 +1318,9 @@ warnings = [
     '-Wno-array-bounds',
     '-Wno-nonnull',
     '-Wno-catch-value',
+    '-Wno-unused-private-field',
+    '-Wno-ambiguous-reversed-operator',
+    '-Wno-deprecated-declarations',
 ]

 warnings = [w
@@ -1373,7 +1376,8 @@ if has_wasmtime:
 else:
     print("wasmtime not found - WASM support will not be enabled in this build")

-linker_flags = linker_flags(compiler=args.cxx)
+linker_flags = '-fuse-ld=bfd'
+#linker_flags(compiler=args.cxx)

 dbgflag = '-g -gz' if args.debuginfo else ''
 tests_link_rule = 'link' if args.tests_debuginfo else 'link_stripped'
@@ -1665,8 +1669,8 @@ abseil_libs = ['absl/' + lib for lib in [
     'time/libabsl_time.a',
     'time/libabsl_time_zone.a',
     'numeric/libabsl_int128.a',
-    'hash/libabsl_city.a',
     'hash/libabsl_hash.a',
+    'hash/libabsl_city.a',
     'hash/libabsl_low_level_hash.a',
     'base/libabsl_malloc_internal.a',
     'base/libabsl_spinlock_wait.a',
diff --git a/schema.cc b/schema.cc
index faa0e68..d9eac78 100644
--- a/schema.cc
+++ b/schema.cc
@@ -142,7 +142,7 @@ static const dht::sharder& get_sharder(unsigned shard_count, unsigned ignore_msb
     auto it = sharders.find({shard_count, ignore_msb});
     if (it == sharders.end()) {
         auto sharder = std::make_unique<dht::sharder>(shard_count, ignore_msb);
-        it = sharders.insert({{shard_count, ignore_msb}, std::move(sharder)}).first;
+       it = sharders.emplace(std::make_pair(shard_count, ignore_msb), std::move(sharder)).first;
     }
     return *it->second;
 }
diff --git a/sstables/processing_result_generator.hh b/sstables/processing_result_generator.hh
index ebfa452..bd782c3 100644
--- a/sstables/processing_result_generator.hh
+++ b/sstables/processing_result_generator.hh
@@ -11,7 +11,7 @@
 #include <seastar/core/coroutine.hh>
 #include "sstables/consumer.hh"

-#if __cpp_impl_coroutine >= 201902L
+#if __has_include(<coroutine>) && (!defined(__clang__) || __clang_major__ >= 14)
 #  define COROUTINE_NS std
 #else
 #  define COROUTINE_NS std::experimental
