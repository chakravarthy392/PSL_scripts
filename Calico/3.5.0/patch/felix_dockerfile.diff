--- originalfile	2018-10-31 05:11:55.868885000 -0400
+++ updatedfile	2018-10-12 00:44:43.068062000 -0400
@@ -1,7 +1,7 @@
 ARG QEMU_IMAGE=calico/go-build:latest
 FROM ${QEMU_IMAGE} as qemu
 
-FROM s390x/alpine:3.6
+FROM s390x/alpine:3.8 as base
 MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)
 
 # Enable non-native builds of this image on an amd64 hosts.
@@ -10,13 +10,10 @@
 # when running on a kernel >= 4.8, this will become less relevant
 COPY --from=qemu /usr/bin/qemu-s390x-static /usr/bin/
 
-
-# Since our binary isn't designed to run as PID 1, run it via the tini init daemon.
 RUN apk --no-cache add --update tini
-ENTRYPOINT ["/sbin/tini", "--"]
 
 # Install Felix's dependencies.
-RUN apk --no-cache add ip6tables ipset iputils iproute2 conntrack-tools
+RUN apk --no-cache add ip6tables ipset iputils iproute2 conntrack-tools file
 
 ADD felix.cfg /etc/calico/felix.cfg
 ADD calico-felix-wrapper usr/bin
@@ -24,9 +21,19 @@
 # Put out binary in /code rather than directly in /usr/bin.  This allows the downstream builds
 # to more easily extract the Felix build artefacts from the container.
 RUN mkdir /code
-ADD bin/calico-felix /code
-WORKDIR /code
+ADD bin/calico-felix-s390x /code/calico-felix
 RUN ln -s /code/calico-felix /usr/bin
 
+# final image just copies everything over
+# do NOT do any RUN commands in the final image
+FROM scratch
+
+COPY --from=base / /
+
+WORKDIR /code
+
+# Since our binary isn't designed to run as PID 1, run it via the tini init daemon.
+ENTRYPOINT ["/sbin/tini", "--"]
+
 # Run felix by default
 CMD ["calico-felix-wrapper"]
