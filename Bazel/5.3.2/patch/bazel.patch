diff --git a/WORKSPACE b/WORKSPACE
old mode 100644
new mode 100755
index 84b1ca145d..277c924c21
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -587,6 +587,19 @@ http_archive(
     ],
 )
 
+# This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
+http_archive(
+    name = "remotejdk15_linux_s390x_for_testing",
+    build_file = "@local_jdk//:BUILD.bazel",
+    patch_cmds = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE,
+    patch_cmds_win = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE_WIN,
+    sha256 = "7dc35a8a4ba1ccf6cfe96fcf26e09ed936f1802ca668ca6bf708e2392c35ab6a",
+    strip_prefix = "jdk-15.0.2+7",
+    urls = [
+        "https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_s390x_linux_hotspot_15.0.2_7.tar.gz",
+    ],
+)
+
 # This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
 http_archive(
     name = "remotejdk15_macos_for_testing",
@@ -643,6 +656,17 @@ http_archive(
     ],
 )
 
+# This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
+http_archive(
+    name = "remotejdk16_linux_s390x_for_testing",
+    build_file = "@local_jdk//:BUILD.bazel",
+    patch_cmds = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE,
+    patch_cmds_win = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE_WIN,
+    sha256 = "fa3ab64ae26727196323105714ac50589ed2782a4c92a29730f7aa886c15807e",
+    strip_prefix = "jdk-16.0.2+7",
+    urls = ["https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_s390x_linux_hotspot_16.0.2_7.tar.gz"],
+)
+
 # This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
 http_archive(
     name = "remotejdk16_macos_for_testing",
@@ -699,6 +723,17 @@ http_archive(
     ],
 )
 
+# This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
+http_archive(
+    name = "remotejdk17_linux_s390x_for_testing",
+    build_file = "@local_jdk//:BUILD.bazel",
+    patch_cmds = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE,
+    patch_cmds_win = EXPORT_WORKSPACE_IN_BUILD_BAZEL_FILE_WIN,
+    sha256 = "383ac8ad392036bedab9a08eb55395b95593a6cc268c422a2bab53f0977a4c54",
+    strip_prefix = "jdk-17.0.2+8",
+    urls = ["https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.2_8.tar.gz"],
+)
+
 # This must be kept in sync with src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.
 http_archive(
     name = "remotejdk17_macos_for_testing",
@@ -868,6 +903,18 @@ exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
     urls = ["https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"],
 )
 
+# This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
+http_archive(
+    name = "openjdk11_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "79a27a4dc23dff38a5c21e5ba9b7efcf0aa5e14ace1a3b19bec53e255c487521",
+    strip_prefix = "jdk-11.0.14.1+1",
+    urls = ["https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.14.1_1.tar.gz"],
+)
+
 # This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
 http_archive(
     name = "openjdk15_linux_archive",
@@ -928,6 +975,18 @@ exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
     ],
 )
 
+# This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
+http_archive(
+    name = "openjdk15_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "7dc35a8a4ba1ccf6cfe96fcf26e09ed936f1802ca668ca6bf708e2392c35ab6a",
+    strip_prefix = "jdk-15.0.2+7",
+    urls = ["https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_s390x_linux_hotspot_15.0.2_7.tar.gz"],
+)
+
 # This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
 http_archive(
     name = "openjdk16_linux_archive",
@@ -988,6 +1047,18 @@ exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
     ],
 )
 
+# This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
+http_archive(
+    name = "openjdk16_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "fa3ab64ae26727196323105714ac50589ed2782a4c92a29730f7aa886c15807e",
+    strip_prefix = "jdk-16.0.2+7",
+    urls = ["https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_s390x_linux_hotspot_16.0.2_7.tar.gz"],
+)
+
 # This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
 http_archive(
     name = "openjdk17_linux_archive",
@@ -1048,6 +1119,18 @@ exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
     ],
 )
 
+# This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
+http_archive(
+    name = "openjdk17_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "383ac8ad392036bedab9a08eb55395b95593a6cc268c422a2bab53f0977a4c54",
+    strip_prefix = "jdk-17.0.2+8",
+    urls = ["https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.2_8.tar.gz"],
+)
+
 # This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
 dist_http_archive(
     name = "openjdk17_windows_arm64_archive",
diff --git a/WORKSPACE.bzlmod b/WORKSPACE.bzlmod
old mode 100644
new mode 100755
index aca699f2ec..0cd130fd26
--- a/WORKSPACE.bzlmod
+++ b/WORKSPACE.bzlmod
@@ -197,6 +197,22 @@ maybe(
     version = "15",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk15_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "7dc35a8a4ba1ccf6cfe96fcf26e09ed936f1802ca668ca6bf708e2392c35ab6a",
+    strip_prefix = "jdk-15.0.2+7",
+    urls = [
+        "https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_s390x_linux_hotspot_15.0.2_7.tar.gz",
+    ],
+    version = "15",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
@@ -265,6 +281,20 @@ maybe(
     version = "16",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk16_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "fa3ab64ae26727196323105714ac50589ed2782a4c92a29730f7aa886c15807e",
+    strip_prefix = "jdk-16.0.2+7",
+    urls = ["https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_s390x_linux_hotspot_16.0.2_7.tar.gz"],
+    version = "16",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
@@ -333,6 +363,20 @@ maybe(
     version = "17",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk17_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "383ac8ad392036bedab9a08eb55395b95593a6cc268c422a2bab53f0977a4c54",
+    strip_prefix = "jdk-17.0.2+8",
+    urls = ["https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.2_8.tar.gz"],
+    version = "17",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
diff --git a/distdir.bzl b/distdir.bzl
index 7a135c00e3..21e77d40ee 100644
--- a/distdir.bzl
+++ b/distdir.bzl
@@ -91,6 +91,11 @@ def dist_http_archive(name, **kwargs):
         kwargs["patches"] = info.get("patches")
     if "strip_prefix" not in kwargs:
         kwargs["strip_prefix"] = info.get("strip_prefix")
+    info_patch_cmds = info.get("patch_cmds")
+    if info_patch_cmds:
+        if "patch_cmds" not in kwargs:
+            kwargs["patch_cmds"] = []
+        kwargs["patch_cmds"] = kwargs["patch_cmds"] + info_patch_cmds
     http_archive(
         name = name,
         sha256 = info["sha256"],
diff --git a/distdir_deps.bzl b/distdir_deps.bzl
old mode 100644
new mode 100755
index 4db9bde9ae..2890df7b7c
--- a/distdir_deps.bzl
+++ b/distdir_deps.bzl
@@ -78,6 +78,7 @@ DIST_DEPS = {
         "archive": "7e4afce6fe62dbff0a4a03450143146f9f2d7488.tar.gz",
         "sha256": "8e7d59a5b12b233be5652e3d29f42fba01c7cbab09f6b3a8d0a57ed6d1e9a0da",
         "strip_prefix": "rules_proto-7e4afce6fe62dbff0a4a03450143146f9f2d7488",
+        "patch_cmds": ["sed -i s/com_google_protobuf_protoc_linux_s390x/com_github_protocolbuffers_protobuf/ proto/private/BUILD.release"],
         "urls": [
             "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/7e4afce6fe62dbff0a4a03450143146f9f2d7488.tar.gz",
             "https://github.com/bazelbuild/rules_proto/archive/7e4afce6fe62dbff0a4a03450143146f9f2d7488.tar.gz",
@@ -370,6 +371,21 @@ DIST_DEPS = {
         ],
         "used_in": ["test_WORKSPACE_files"],
     },
+    "remotejdk11_linux_s390x": {
+        "aliases": [
+            "remotejdk11_linux_s390x_for_testing",
+            "openjdk11_linux_s390x_archive",
+            "openjdk_linux_s390x_vanilla",
+        ],
+        "archive": "OpenJDK11U-jdk_s390x_linux_hotspot_11.0.7_10.tar.gz",
+        "sha256": "d9b72e87a1d3ebc0c9552f72ae5eb150fffc0298a7cb841f1ce7bfc70dcd1059",
+        "strip_prefix": "jdk-11.0.7+10",
+        "urls": [
+            "https://mirror.bazel.build/github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.7+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.7_10.tar.gz",
+            "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.7+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.7_10.tar.gz",
+        ],
+        "used_in": ["test_WORKSPACE_files"],
+    },
 }
 
 # Add aliased names
@@ -397,6 +413,7 @@ maybe(
     name = "{repo}",
     sha256 = "{sha256}",
     strip_prefix = {strip_prefix},
+    patch_cmds = {patch_cmds},
     urls = {urls},
 )
 """
@@ -406,6 +423,7 @@ http_archive(
     name = "{repo}",
     sha256 = "{sha256}",
     strip_prefix = {strip_prefix},
+    patch_cmds = {patch_cmds},
     urls = {urls},
 )
 """
@@ -418,12 +436,16 @@ http_archive(
             strip_prefix = "\"%s\"" % strip_prefix
         else:
             strip_prefix = "None"
+        patch_cmds = info.get("patch_cmds")
+        if not patch_cmds:
+            patch_cmds = "None"
 
         repo_stanzas["{%s}" % repo] = repo_clause.format(
             repo = repo,
             archive = info["archive"],
             sha256 = str(info["sha256"]),
             strip_prefix = strip_prefix,
+            patch_cmds = patch_cmds,
             urls = info["urls"],
         )
 
diff --git a/src/BUILD b/src/BUILD
old mode 100644
new mode 100755
index b08bffbf68..9b853cab1b
--- a/src/BUILD
+++ b/src/BUILD
@@ -123,8 +123,8 @@ JAVA_TOOLS = [
         "//src/test:__subpackages__",  # For integration tests
     ],
 ) for suffix, jdk in {
-    "_jdk_allmodules": [":embedded_jdk_allmodules_cached"],
-    "_jdk_minimal": [":embedded_jdk_minimal_cached"],
+    "_jdk_allmodules": [":embedded_jdk_allmodules"],
+    "_jdk_minimal": [":embedded_jdk_minimal"],
     "_dev_jdk": [":embedded_jdk_minimal"],
     "_nojdk": [],
 }.items()]
@@ -157,6 +157,9 @@ filegroup(
         "//src/conditions:linux_aarch64": [
             "@openjdk_linux_aarch64//file",
         ],
+        "//src/conditions:linux_s390x": [
+            "//src:embedded_jdk_allmodules",
+        ],
         "//conditions:default": [
             "@openjdk_linux//file",
         ],
@@ -182,6 +185,9 @@ filegroup(
         "//src/conditions:linux_aarch64": [
             "@openjdk_linux_aarch64_minimal//file",
         ],
+        "//src/conditions:linux_s390x": [
+            "//src:embedded_jdk_minimal",
+        ],
         "//conditions:default": [
             "@openjdk_linux_minimal//file",
         ],
@@ -654,19 +660,23 @@ filegroup(
         "@openjdk11_darwin_aarch64_archive//:WORKSPACE",
         "@openjdk11_darwin_archive//:WORKSPACE",
         "@openjdk11_linux_archive//:WORKSPACE",
+        "@openjdk11_linux_s390x_archive//:WORKSPACE",
         "@openjdk11_windows_archive//:WORKSPACE",
         "@openjdk11_windows_arm64_archive//:WORKSPACE",
         "@openjdk15_darwin_aarch64_archive//:WORKSPACE",
         "@openjdk15_darwin_archive//:WORKSPACE",
         "@openjdk15_linux_archive//:WORKSPACE",
+        "@openjdk15_linux_s390x_archive//:WORKSPACE",
         "@openjdk15_windows_archive//:WORKSPACE",
         "@openjdk16_darwin_aarch64_archive//:WORKSPACE",
         "@openjdk16_darwin_archive//:WORKSPACE",
         "@openjdk16_linux_archive//:WORKSPACE",
+        "@openjdk16_linux_s390x_archive//:WORKSPACE",
         "@openjdk16_windows_archive//:WORKSPACE",
         "@openjdk17_darwin_aarch64_archive//:WORKSPACE",
         "@openjdk17_darwin_archive//:WORKSPACE",
         "@openjdk17_linux_archive//:WORKSPACE",
+        "@openjdk17_linux_s390x_archive//:WORKSPACE",
         "@openjdk17_windows_archive//:WORKSPACE",
         "@openjdk17_windows_arm64_archive//:WORKSPACE",
         "@openjdk_linux_aarch64_minimal//file",
@@ -692,14 +702,17 @@ filegroup(
         "@remotejdk11_win_arm64_for_testing//:WORKSPACE",
         "@remotejdk11_win_for_testing//:WORKSPACE",
         "@remotejdk15_linux_for_testing//:WORKSPACE",
+        "@remotejdk15_linux_s390x_for_testing//:WORKSPACE",
         "@remotejdk15_macos_aarch64_for_testing//:WORKSPACE",
         "@remotejdk15_macos_for_testing//:WORKSPACE",
         "@remotejdk15_win_for_testing//:WORKSPACE",
         "@remotejdk16_linux_for_testing//:WORKSPACE",
+        "@remotejdk16_linux_s390x_for_testing//:WORKSPACE",
         "@remotejdk16_macos_aarch64_for_testing//:WORKSPACE",
         "@remotejdk16_macos_for_testing//:WORKSPACE",
         "@remotejdk16_win_for_testing//:WORKSPACE",
         "@remotejdk17_linux_for_testing//:WORKSPACE",
+        "@remotejdk17_linux_s390x_for_testing//:WORKSPACE",
         "@remotejdk17_macos_aarch64_for_testing//:WORKSPACE",
         "@remotejdk17_macos_for_testing//:WORKSPACE",
         "@remotejdk17_win_arm64_for_testing//:WORKSPACE",
diff --git a/src/main/cpp/util/md5.cc b/src/main/cpp/util/md5.cc
index 1c91bab570..ea66285542 100644
--- a/src/main/cpp/util/md5.cc
+++ b/src/main/cpp/util/md5.cc
@@ -41,7 +41,7 @@
 
 #include <stddef.h>  // for offsetof
 #include <string.h>  // for memcpy
-
+#include <byteswap.h> // for byteswap
 #include <cinttypes>
 
 #if !_STRING_ARCH_unaligned
@@ -160,6 +160,10 @@ void Md5Digest::Finish(unsigned char digest[16]) {
   /* Put the 64-bit file length in *bits* at the end of the buffer.  */
   unsigned int size = (ctx_buffer_len < 56 ? 64 : 128);
   uint32_t words[2] = { count[0] << 3, (count[1] << 3) | (count[0] >> 29) };
+
+  words[0] = bswap_32(words[0]);
+  words[1] = bswap_32(words[1]);
+
   memcpy(ctx_buffer + size - 8, words, 8);
 
   memcpy(ctx_buffer + ctx_buffer_len, kPadding, size - 8 - ctx_buffer_len);
@@ -206,10 +210,18 @@ void Md5Digest::Transform(
   // ROTATE_LEFT rotates x left n bits.
 #define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))
 
+// SET reads 4 input bytes in little-endian byte order and stores them
+// in a properly aligned word in host byte order.
+#define SET(n)                                                                 \
+   (x[(n)] =                                                                \
+        (uint32_t) ptr[(n) * 4] | ((uint32_t) ptr[(n) * 4 + 1] << 8) |    \
+        ((uint32_t) ptr[(n) * 4 + 2] << 16) |                                \
+        ((uint32_t) ptr[(n) * 4 + 3] << 24))
+
   // FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
   // Rotation is separate from addition to prevent recomputation.
-#define FF(a, b, c, d, s, ac) { \
-      (a) += F((b), (c), (d)) + ((*x_pos++ = *cur_word++)) + \
+#define FF(a, b, c, d, s, x, ac) { \
+      (a) += F((b), (c), (d)) + (x) + \
           static_cast<uint32_t>(ac); \
       (a) = ROTATE_LEFT((a), (s)); \
       (a) += (b); \
@@ -242,33 +254,33 @@ void Md5Digest::Transform(
   uint32_t d = state[3];
   uint32_t x[16];
 
-  const uint32_t *cur_word = reinterpret_cast<const uint32_t*>(buffer);
-  const uint32_t *end_word = cur_word + (len / sizeof(uint32_t));
+  const uint8_t *ptr = reinterpret_cast<const uint8_t*>(buffer);
+  // const uint32_t *cur_word = reinterpret_cast<const uint32_t*>(buffer);
+  // const uint32_t *end_word = cur_word + (len / sizeof(uint32_t));
 
-  while (cur_word < end_word) {
-    uint32_t *x_pos = x;
+  do {
     uint32_t prev_a = a;
     uint32_t prev_b = b;
     uint32_t prev_c = c;
     uint32_t prev_d = d;
 
     // Round 1
-    FF(a, b, c, d, S11, 0xd76aa478);  // 1
-    FF(d, a, b, c, S12, 0xe8c7b756);  // 2
-    FF(c, d, a, b, S13, 0x242070db);  // 3
-    FF(b, c, d, a, S14, 0xc1bdceee);  // 4
-    FF(a, b, c, d, S11, 0xf57c0faf);  // 5
-    FF(d, a, b, c, S12, 0x4787c62a);  // 6
-    FF(c, d, a, b, S13, 0xa8304613);  // 7
-    FF(b, c, d, a, S14, 0xfd469501);  // 8
-    FF(a, b, c, d, S11, 0x698098d8);  // 9
-    FF(d, a, b, c, S12, 0x8b44f7af);  // 10
-    FF(c, d, a, b, S13, 0xffff5bb1);  // 11
-    FF(b, c, d, a, S14, 0x895cd7be);  // 12
-    FF(a, b, c, d, S11, 0x6b901122);  // 13
-    FF(d, a, b, c, S12, 0xfd987193);  // 14
-    FF(c, d, a, b, S13, 0xa679438e);  // 15
-    FF(b, c, d, a, S14, 0x49b40821);  // 16
+    FF(a, b, c, d, S11, SET(0), 0xd76aa478);  // 1
+    FF(d, a, b, c, S12, SET(1), 0xe8c7b756);  // 2
+    FF(c, d, a, b, S13, SET(2), 0x242070db);  // 3
+    FF(b, c, d, a, S14, SET(3), 0xc1bdceee);  // 4
+    FF(a, b, c, d, S11, SET(4), 0xf57c0faf);  // 5
+    FF(d, a, b, c, S12, SET(5), 0x4787c62a);  // 6
+    FF(c, d, a, b, S13, SET(6), 0xa8304613);  // 7
+    FF(b, c, d, a, S14, SET(7), 0xfd469501);  // 8
+    FF(a, b, c, d, S11, SET(8), 0x698098d8);  // 9
+    FF(d, a, b, c, S12, SET(9), 0x8b44f7af);  // 10
+    FF(c, d, a, b, S13, SET(10), 0xffff5bb1);  // 11
+    FF(b, c, d, a, S14, SET(11), 0x895cd7be);  // 12
+    FF(a, b, c, d, S11, SET(12), 0x6b901122);  // 13
+    FF(d, a, b, c, S12, SET(13), 0xfd987193);  // 14
+    FF(c, d, a, b, S13, SET(14), 0xa679438e);  // 15
+    FF(b, c, d, a, S14, SET(15), 0x49b40821);  // 16
 
     // Round 2
     GG(a, b, c, d, x[ 1], S21, 0xf61e2562);  // 17
@@ -328,7 +340,8 @@ void Md5Digest::Transform(
     b += prev_b;
     c += prev_c;
     d += prev_d;
-  }
+    ptr += 64;
+  } while (len -=64);
 
   state[0] = a;
   state[1] = b;
@@ -336,9 +349,18 @@ void Md5Digest::Transform(
   state[3] = d;
 }
 
-string Md5Digest::String() const {
+static void swapStateByteOrder(unsigned int (&state)[4]){
+  state[0] = bswap_32(state[0]);
+  state[1] = bswap_32(state[1]);
+  state[2] = bswap_32(state[2]);
+  state[3] = bswap_32(state[3]);
+}
+
+string Md5Digest::String() {
   string result;
+  swapStateByteOrder(state); // the hex function converts the state value in little-endian way, so we reverse the order first
   b2a_hex(reinterpret_cast<const uint8_t*>(state), &result, 16);
+  swapStateByteOrder(state); // the hex function converts the state value in little-endian way, so we reverse the order first
   return result;
 }
 
diff --git a/src/main/cpp/util/md5.h b/src/main/cpp/util/md5.h
index 8f8f3aff23..1f83b3eb8f 100644
--- a/src/main/cpp/util/md5.h
+++ b/src/main/cpp/util/md5.h
@@ -53,7 +53,7 @@ class Md5Digest {
 
   // Produces a hexadecimal string representation of this digest in the form:
   // [0-9a-f]{32}
-  std::string String() const;
+  std::string String();
 
  private:
   void Transform(const unsigned char* buffer, unsigned int len);
diff --git a/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.tmpl b/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.tmpl
old mode 100644
new mode 100755
index 263c9214b4..639924c44f
--- a/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.tmpl
+++ b/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE.tmpl
@@ -165,6 +165,22 @@ maybe(
     version = "15",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk15_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "7dc35a8a4ba1ccf6cfe96fcf26e09ed936f1802ca668ca6bf708e2392c35ab6a",
+    strip_prefix = "jdk-15.0.2+7",
+    urls = [
+        "https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_s390x_linux_hotspot_15.0.2_7.tar.gz",
+    ],
+    version = "15",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
@@ -233,6 +249,20 @@ maybe(
     version = "16",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk16_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "fa3ab64ae26727196323105714ac50589ed2782a4c92a29730f7aa886c15807e",
+    strip_prefix = "jdk-16.0.2+7",
+    urls = ["https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_s390x_linux_hotspot_16.0.2_7.tar.gz"],
+    version = "16",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
@@ -301,6 +331,20 @@ maybe(
     version = "17",
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+maybe(
+    remote_java_repository,
+    name = "remotejdk17_linux_s390x",
+    exec_compatible_with = [
+        "@platforms//os:linux",
+        "@platforms//cpu:s390x",
+    ],
+    sha256 = "383ac8ad392036bedab9a08eb55395b95593a6cc268c422a2bab53f0977a4c54",
+    strip_prefix = "jdk-17.0.2+8",
+    urls = ["https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.2_8.tar.gz"],
+    version = "17",
+)
+
 # This must be kept in sync with the top-level WORKSPACE file.
 maybe(
     remote_java_repository,
diff --git a/src/test/py/bazel/test_base.py b/src/test/py/bazel/test_base.py
old mode 100644
new mode 100755
index d722daee06..d5101274f6
--- a/src/test/py/bazel/test_base.py
+++ b/src/test/py/bazel/test_base.py
@@ -66,14 +66,17 @@ class TestBase(unittest.TestCase):
       'remotejdk11_win_for_testing',
       'remotejdk11_win_arm64_for_testing',
       'remotejdk15_linux_for_testing',
+      'remotejdk15_linux_s390x_for_testing',
       'remotejdk15_macos_for_testing',
       'remotejdk15_macos_aarch64_for_testing',
       'remotejdk15_win_for_testing',
       'remotejdk16_linux_for_testing',
+      'remotejdk16_linux_s390x_for_testing',
       'remotejdk16_macos_for_testing',
       'remotejdk16_macos_aarch64_for_testing',
       'remotejdk16_win_for_testing',
       'remotejdk17_linux_for_testing',
+      'remotejdk17_linux_s390x_for_testing',
       'remotejdk17_macos_for_testing',
       'remotejdk17_macos_aarch64_for_testing',
       'remotejdk17_win_for_testing',
diff --git a/src/test/shell/bazel/BUILD b/src/test/shell/bazel/BUILD
index 49e0cb698a..626b450365 100644
--- a/src/test/shell/bazel/BUILD
+++ b/src/test/shell/bazel/BUILD
@@ -932,7 +932,6 @@ sh_test(
     ],
     shard_count = 22,
     tags = [
-        "block-network",
         "no_windows",
     ],
 )
@@ -1106,7 +1105,6 @@ sh_test(
         "@bazel_tools//tools/bash/runfiles",
     ],
     exec_compatible_with = ["//:highcpu_machine"],
-    tags = ["block-network"],
 )
 
 sh_test(
@@ -1125,7 +1123,6 @@ sh_test(
     ],
     exec_compatible_with = ["//:highcpu_machine"],
     tags = [
-        "block-network",
         "no_windows",
     ],
 )
diff --git a/src/test/shell/bazel/testdata/jdk_http_archives.tmpl b/src/test/shell/bazel/testdata/jdk_http_archives.tmpl
index 358570e0a0..6f2f7684f1 100644
--- a/src/test/shell/bazel/testdata/jdk_http_archives.tmpl
+++ b/src/test/shell/bazel/testdata/jdk_http_archives.tmpl
@@ -44,6 +44,18 @@ http_archive(
     urls = ["https://mirror.bazel.build/openjdk/azul-zulu11.50.19-ca-jdk11.0.12/zulu11.50.19-ca-jdk11.0.12-win_x64.zip"],
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+http_archive(
+    name = "openjdk11_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "79a27a4dc23dff38a5c21e5ba9b7efcf0aa5e14ace1a3b19bec53e255c487521",
+    strip_prefix = "jdk-11.0.14.1+1",
+    urls = ["https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.14.1_1.tar.gz"],
+)
+
 #################################### JDK 15 ####################################
 # This must be kept in sync with the top-level WORKSPACE file.
 http_archive(
@@ -105,6 +117,18 @@ exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
     ],
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+http_archive(
+    name = "openjdk15_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "7dc35a8a4ba1ccf6cfe96fcf26e09ed936f1802ca668ca6bf708e2392c35ab6a",
+    strip_prefix = "jdk-15.0.2+7",
+    urls = ["https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_s390x_linux_hotspot_15.0.2_7.tar.gz"],
+)
+
 #################################### JDK 16 ####################################
 # This must be kept in sync with the top-level WORKSPACE file.
 http_archive(
@@ -177,6 +201,18 @@ http_archive(
     ],
 )
 
+# This must be kept in sync with the top-level WORKSPACE file.
+http_archive(
+    name = "openjdk16_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "fa3ab64ae26727196323105714ac50589ed2782a4c92a29730f7aa886c15807e",
+    strip_prefix = "jdk-16.0.2+7",
+    urls = ["https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_s390x_linux_hotspot_16.0.2_7.tar.gz"],
+)
+
 #################################### JDK 17 ####################################
 # This must be kept in sync with the top-level WORKSPACE file.
 http_archive(
@@ -249,3 +285,15 @@ http_archive(
         "https://cdn.azul.com/zulu/bin/zulu17.30.15-ca-jdk17.0.1-win_aarch64.zip"
     ],
 )
+
+# This must be kept in sync with src/test/shell/bazel/testdata/jdk_http_archives.
+http_archive(
+    name = "openjdk17_linux_s390x_archive",
+    build_file_content = """
+java_runtime(name = 'runtime', srcs =  glob(['**']), visibility = ['//visibility:public'])
+exports_files(["WORKSPACE"], visibility = ["//visibility:public"])
+""",
+    sha256 = "383ac8ad392036bedab9a08eb55395b95593a6cc268c422a2bab53f0977a4c54",
+    strip_prefix = "jdk-17.0.2+8",
+    urls = ["https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.2_8.tar.gz"],
+)
diff --git a/src/test/shell/testenv.sh.tmpl b/src/test/shell/testenv.sh.tmpl
index fbdb2a147c..dc1af90450 100755
--- a/src/test/shell/testenv.sh.tmpl
+++ b/src/test/shell/testenv.sh.tmpl
@@ -288,19 +288,23 @@ EOF
         "openjdk11_darwin_archive"
         "openjdk11_darwin_aarch64_archive"
         "openjdk11_linux_archive"
+        "openjdk11_linux_s390x_archive"
         "openjdk11_windows_archive"
         "openjdk11_windows_arm64_archive"
         "openjdk15_darwin_archive"
         "openjdk15_darwin_aarch64_archive"
         "openjdk15_linux_archive"
+        "openjdk15_linux_s390x_archive"
         "openjdk15_windows_archive"
         "openjdk16_darwin_archive"
         "openjdk16_darwin_aarch64_archive"
         "openjdk16_linux_archive"
+        "openjdk16_linux_s390x_archive"
         "openjdk16_windows_archive"
         "openjdk17_darwin_archive"
         "openjdk17_darwin_aarch64_archive"
         "openjdk17_linux_archive"
+        "openjdk17_linux_s390x_archive"
         "openjdk17_windows_archive"
         "openjdk17_windows_arm64_archive"
         "openjdk_linux_aarch64_minimal"
@@ -325,14 +329,17 @@ EOF
         "remotejdk11_macos_aarch64_for_testing"
         "remotejdk11_win_for_testing"
         "remotejdk15_linux_for_testing"
+        "remotejdk15_linux_s390x_for_testing"
         "remotejdk15_macos_for_testing"
         "remotejdk15_macos_aarch64_for_testing"
         "remotejdk15_win_for_testing"
         "remotejdk16_linux_for_testing"
+        "remotejdk16_linux_s390x_for_testing"
         "remotejdk16_macos_for_testing"
         "remotejdk16_macos_aarch64_for_testing"
         "remotejdk16_win_for_testing"
         "remotejdk17_linux_for_testing"
+        "remotejdk17_linux_s390x_for_testing"
         "remotejdk17_macos_for_testing"
         "remotejdk17_macos_aarch64_for_testing"
         "remotejdk17_win_for_testing"
diff --git a/tools/jdk/BUILD.tools b/tools/jdk/BUILD.tools
old mode 100644
new mode 100755
index 347d15da33..a587a34bfd
--- a/tools/jdk/BUILD.tools
+++ b/tools/jdk/BUILD.tools
@@ -452,15 +452,18 @@ _JDKS = [
     "remotejdk15_macos_aarch64",
     "remotejdk15_win",
     "remotejdk15_linux",
+    "remotejdk15_linux_s390x",
     "remotejdk16_macos",
     "remotejdk16_macos_aarch64",
     "remotejdk16_win",
     "remotejdk16_linux",
+    "remotejdk16_s390x_linux",
     "remotejdk17_macos",
     "remotejdk17_macos_aarch64",
     "remotejdk17_win",
     "remotejdk17_win_arm64",
     "remotejdk17_linux",
+    "remotejdk17_linux_s390x",
 ]
 
 [
