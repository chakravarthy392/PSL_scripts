diff --git a/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java b/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
index ccc81954aab..81aebb11f85 100644
--- a/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
+++ b/build-tools/src/main/java/org/elasticsearch/gradle/Architecture.java
@@ -11,7 +11,8 @@ package org.elasticsearch.gradle;
 public enum Architecture {
 
     X64("x86_64"),
-    AARCH64("aarch64");
+    AARCH64("aarch64"),
+    S390X("s390x");
 
     public final String classifier;
 
@@ -27,6 +28,8 @@ public enum Architecture {
                 return X64;
             case "aarch64":
                 return AARCH64;
+            case "s390x":
+                return S390X;
             default:
                 throw new IllegalArgumentException("can not determine architecture from [" + architecture + "]");
         }
diff --git a/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java b/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
index 3df0f3352f4..d5ee4b40c0a 100644
--- a/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
+++ b/build-tools/src/main/java/org/elasticsearch/gradle/Jdk.java
@@ -19,10 +19,11 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.*;
 
 public class Jdk implements Buildable, Iterable<File> {
 
-    private static final List<String> ALLOWED_ARCHITECTURES = List.of("aarch64", "x64");
+    private static final List<String> ALLOWED_ARCHITECTURES = Collections.unmodifiableList(Arrays.asList("aarch64", "x64", "s390x"));
     private static final List<String> ALLOWED_VENDORS = List.of("adoptium", "openjdk");
     private static final List<String> ALLOWED_PLATFORMS = List.of("darwin", "linux", "windows", "mac");
     private static final Pattern VERSION_PATTERN = Pattern.compile("(\\d+)(\\.\\d+\\.\\d+)?\\+(\\d+(?:\\.\\d+)?)(@([a-f0-9]{32}))?");
diff --git a/distribution/archives/build.gradle b/distribution/archives/build.gradle
index 0c56b8e02a0..b34f2834e05 100644
--- a/distribution/archives/build.gradle
+++ b/distribution/archives/build.gradle
@@ -118,6 +118,13 @@ distribution_archives {
     }
   }
 
+  linuxS390xTar {
+    archiveClassifier = 'linux-s390x'
+    content {
+      archiveFiles(modulesFiles('linux-s390x'), 'tar', 'linux', 's390x', false, true)
+    }
+  }
+
   linuxTar {
     archiveClassifier = 'linux-x86_64'
     content {
@@ -125,6 +132,13 @@ distribution_archives {
     }
   }
 
+  ossLinuxS390xTar {
+    archiveClassifier = 'linux-s390x'
+    content {
+      archiveFiles(modulesFiles('linux-s390x'), 'tar', 'linux', 's390x', true, true)
+    }
+  }
+
   noJdkLinuxTar {
     archiveClassifier = 'no-jdk-linux-x86_64'
     content {
diff --git a/distribution/archives/linux-s390x-tar/build.gradle b/distribution/archives/linux-s390x-tar/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/archives/linux-s390x-tar/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/archives/oss-linux-s390x-tar/build.gradle b/distribution/archives/oss-linux-s390x-tar/build.gradle
new file mode 100644
index 00000000000..934c5bd807b
--- /dev/null
+++ b/distribution/archives/oss-linux-s390x-tar/build.gradle
@@ -0,0 +1,4 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/build.gradle b/distribution/build.gradle
index fa17477116f..4dfb7174f8f 100644
--- a/distribution/build.gradle
+++ b/distribution/build.gradle
@@ -249,7 +249,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
   // Setup all required JDKs
   project.jdks {
     ['darwin', 'windows', 'linux'].each { platform ->
-      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64'] : ['x64']).each { architecture ->
+      (platform == 'linux' || platform == 'darwin' ? ['x64', 'aarch64', 's390x'] : ['x64']).each { architecture ->
         "bundled_${platform}_${architecture}" {
           it.platform = platform
           it.version = VersionProperties.bundledJdkVersion
@@ -330,7 +330,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
             it.mode = 0644
           }
         }
-        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64']
+        List excludePlatforms = ['linux-x86_64', 'linux-aarch64', 'linux-s390x', 'windows-x86_64', 'darwin-x86_64', 'darwin-aarch64']
         if (platform != null) {
           excludePlatforms.remove(excludePlatforms.indexOf(platform))
         } else {
diff --git a/distribution/docker/build.gradle b/distribution/docker/build.gradle
index a58dd77b90c..0127ae7434f 100644
--- a/distribution/docker/build.gradle
+++ b/distribution/docker/build.gradle
@@ -40,6 +40,8 @@ testFixtures.useFixture()
 configurations {
   aarch64DockerSource
   dockerSource
+  s390xDockerSource
+  s390xOssDockerSource
   log4jConfig
   tini
 }
@@ -49,6 +51,8 @@ String tiniArch = Architecture.current() == Architecture.AARCH64 ? 'arm64' : 'am
 dependencies {
   aarch64DockerSource project(path: ":distribution:archives:linux-aarch64-tar", configuration: 'default')
   dockerSource project(path: ":distribution:archives:linux-tar", configuration: 'default')
+  s390xDockerSource project(path: ":distribution:archives:linux-s390x-tar")
+  s390xOssDockerSource project(path: ":distribution:archives:oss-linux-s390x-tar")
   log4jConfig project(path: ":distribution", configuration: 'log4jConfig')
   tini "krallin:tini:0.19.0:${tiniArch}"
 }
@@ -94,7 +98,7 @@ private static String toCamel(String input) {
 
 private static String taskName(String prefix, Architecture architecture, DockerBase base, String suffix) {
   return prefix +
-    (architecture == Architecture.AARCH64 ? 'Aarch64' : '') +
+    (architecture == Architecture.AARCH64 ? 'Aarch64' : architecture == Architecture.S390X ? 's390x-' : '') +
     (base == DockerBase.DEFAULT ? "" : toCamel(base.name())) +
     suffix
 }
@@ -156,7 +160,7 @@ tasks.register("copyNodeKeyMaterial", Sync) {
 
 elasticsearch_distributions {
   Architecture.values().each { eachArchitecture ->
-    "docker_${eachArchitecture == Architecture.AARCH64 ? '_aarch64' : ''}" {
+    "docker_${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : eachArchitecture == Architecture.S390X ? '_s390x' : '' }" {
       architecture = eachArchitecture
       type = InternalElasticsearchDistributionTypes.DOCKER
       version = VersionProperties.getElasticsearch()
@@ -259,6 +263,12 @@ void addTransformDockerContextTask(Architecture architecture, DockerBase base) {
     // Since we replaced the remote URL in the Dockerfile, copy in the required file
     if (architecture == Architecture.AARCH64) {
       from configurations.aarch64DockerSource
+      } else if (architecture == Architecture.S390X) {
+        if (oss){
+          from configurations.s390xOssDockerSource
+        } else {
+          from configurations.s390xDockerSource
+        }
     } else {
       from configurations.dockerSource
     }
diff --git a/distribution/docker/docker-s390x-build-context/build.gradle b/distribution/docker/docker-s390x-build-context/build.gradle
new file mode 100644
index 00000000000..3a1702fb449
--- /dev/null
+++ b/distribution/docker/docker-s390x-build-context/build.gradle
@@ -0,0 +1,14 @@
+import org.elasticsearch.gradle.internal.DockerBase
+
+apply plugin: 'base'
+
+tasks.register("buildDockerBuildContext", Tar) {
+  archiveExtension = 'tar.gz'
+  compression = Compression.GZIP
+  archiveClassifier = "docker-build-context"
+  archiveBaseName = "elasticsearch-s390x"
+  // Non-local builds don't need to specify an architecture.
+  with dockerBuildContext(null, false, DockerBase.DEFAULT)
+}
+
+tasks.named("assemble").configure {dependsOn "buildDockerBuildContext"}
\ No newline at end of file
diff --git a/distribution/docker/docker-s390x-export/build.gradle b/distribution/docker/docker-s390x-export/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/docker/docker-s390x-export/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/docker/oss-docker-s390x-build-context/build.gradle b/distribution/docker/oss-docker-s390x-build-context/build.gradle
new file mode 100644
index 00000000000..70ebadea628
--- /dev/null
+++ b/distribution/docker/oss-docker-s390x-build-context/build.gradle
@@ -0,0 +1,13 @@
+import org.elasticsearch.gradle.internal.DockerBase
+apply plugin: 'base'
+
+tasks.register("buildOssDockerBuildContext", Tar) {
+  archiveExtension = 'tar.gz'
+  compression = Compression.GZIP
+  archiveClassifier = "docker-build-context"
+ archiveBaseName = "elasticsearch-s390x-oss"
+  // Non-local builds don't need to specify an architecture.
+ with dockerBuildContext(null,DockerBase.DEFAULT)
+}
+
+tasks.named("assemble").configure { dependsOn "buildOssDockerBuildContext" }
\ No newline at end of file
diff --git a/distribution/docker/oss-docker-s390x-export/build.gradle b/distribution/docker/oss-docker-s390x-export/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/docker/oss-docker-s390x-export/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/packages/build.gradle b/distribution/packages/build.gradle
index cfc987c79ca..15801d83f5c 100644
--- a/distribution/packages/build.gradle
+++ b/distribution/packages/build.gradle
@@ -118,6 +118,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     if (type == 'deb') {
       if (architecture == 'x64') {
         arch('amd64')
+        } else if (architecture == 's390x') {
+        arch('s390x')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('arm64')
@@ -126,6 +128,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
       assert type == 'rpm' : type
       if (architecture == 'x64') {
         arch('X86_64')
+        } else if (architecture == 's390x') {
+        arch('s390x')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('aarch64')
@@ -161,7 +165,7 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
         with libFiles(oss)
       }
       into('modules') {
-        with modulesFiles('linux-' + ((architecture == 'x64') ? 'x86_64' : architecture))
+        with modulesFiles('linux-' + ((architecture == 'x64') ? 'x86_64' : (architecture == 's390x') ? 's390x' : architecture))
       }
       if (jdk) {
         into('jdk') {
@@ -361,6 +365,10 @@ tasks.register('buildAarch64Deb', Deb) {
   configure(commonDebConfig(false, true, 'aarch64'))
 }
 
+tasks.register('buildS390xDeb', Deb) {
+  configure(commonDebConfig(false, true, 's390x'))
+}
+
 tasks.register('buildDeb', Deb) {
   configure(commonDebConfig(false, true, 'x64'))
 }
@@ -369,6 +377,10 @@ tasks.register('buildAarch64OssDeb', Deb) {
   configure(commonDebConfig(true, true, 'aarch64'))
 }
 
+tasks.register('buildS390xOssDeb', Deb) {
+  configure(commonDebConfig(true, true, 's390x'))
+}
+
 tasks.register('buildOssDeb', Deb) {
   configure(commonDebConfig(true, true, 'x64'))
 }
@@ -414,6 +426,10 @@ tasks.register('buildAarch64Rpm', Rpm) {
   configure(commonRpmConfig(false, true, 'aarch64'))
 }
 
+tasks.register('buildS390xRpm', Rpm) {
+  configure(commonRpmConfig(false, true, 's390x'))
+}
+
 tasks.register('buildRpm', Rpm) {
   configure(commonRpmConfig(false, true, 'x64'))
 }
@@ -422,6 +438,10 @@ tasks.register('buildAarch64OssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'aarch64'))
 }
 
+tasks.register('buildS390xOssRpm', Rpm) {
+  configure(commonRpmConfig(true, true, 's390x'))
+}
+
 tasks.register('buildOssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'x64'))
 }
diff --git a/distribution/packages/s390x-deb/build.gradle b/distribution/packages/s390x-deb/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/packages/s390x-deb/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/packages/s390x-oss-deb/build.gradle b/distribution/packages/s390x-oss-deb/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/packages/s390x-oss-deb/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/packages/s390x-oss-rpm/build.gradle b/distribution/packages/s390x-oss-rpm/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/packages/s390x-oss-rpm/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/distribution/packages/s390x-rpm/build.gradle b/distribution/packages/s390x-rpm/build.gradle
new file mode 100644
index 00000000000..4f7400c7eaa
--- /dev/null
+++ b/distribution/packages/s390x-rpm/build.gradle
@@ -0,0 +1,2 @@
+// This file is intentionally blank. All configuration of the
+// distribution is done in the parent project.
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index e0265c5de5d..eab67f14d18 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -31,22 +31,33 @@ List projects = [
   'distribution:archives:no-jdk-windows-zip',
   'distribution:archives:darwin-tar',
   'distribution:archives:darwin-aarch64-tar',
+  'distribution:archives:oss-linux-s390x-tar',
   'distribution:archives:no-jdk-darwin-tar',
   'distribution:archives:no-jdk-darwin-aarch64-tar',
   'distribution:archives:linux-aarch64-tar',
+  'distribution:archives:linux-s390x-tar',
   'distribution:archives:linux-tar',
   'distribution:archives:no-jdk-linux-tar',
   'distribution:docker',
   'distribution:docker:docker-aarch64-export',
+  'distribution:docker:docker-s390x-build-context',
+  'distribution:docker:docker-s390x-export',
   'distribution:docker:docker-export',
+  'distribution:docker:oss-docker-s390x-build-context',
+  'distribution:docker:oss-docker-s390x-export',
   'distribution:docker:ironbank-docker-aarch64-export',
   'distribution:docker:ironbank-docker-export',
   'distribution:docker:ubi-docker-aarch64-export',
   'distribution:docker:ubi-docker-export',
+  'distribution:docker:ubi-docker-s390x-export',
   'distribution:packages:aarch64-deb',
   'distribution:packages:deb',
   'distribution:packages:no-jdk-deb',
   'distribution:packages:aarch64-rpm',
+  'distribution:packages:s390x-oss-rpm',
+  'distribution:packages:s390x-rpm',
+  'distribution:packages:s390x-oss-deb',
+  'distribution:packages:s390x-deb',
   'distribution:packages:rpm',
   'distribution:packages:no-jdk-rpm',
   'distribution:bwc:bugfix',
