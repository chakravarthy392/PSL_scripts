diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
index 0244b952298..4f60b560917 100644
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -191,9 +191,11 @@ if (project != rootProject) {
     distribution project(':distribution:archives:darwin-tar')
     distribution project(':distribution:archives:oss-darwin-tar')
     distribution project(':distribution:archives:linux-aarch64-tar')
+    distribution project(':distribution:archives:linux-s390x-tar')
     distribution project(':distribution:archives:linux-tar')
     distribution project(':distribution:archives:oss-linux-tar')
     distribution project(':distribution:archives:oss-linux-aarch64-tar')
+    distribution project(':distribution:archives:oss-linux-s390x-tar')
   }

   // for external projects we want to remove the marker file indicating we are running the Elasticsearch project
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java b/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
index f230d9af86e..5801b2c8fca 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java
@@ -22,7 +22,8 @@ package org.elasticsearch.gradle;
 public enum Architecture {

     X64,
-    AARCH64;
+    AARCH64,
+    S390X;

     public static Architecture current() {
         final String architecture = System.getProperty("os.arch", "");
@@ -32,6 +33,8 @@ public enum Architecture {
                 return X64;
             case "aarch64":
                 return AARCH64;
+           case "s390x":
+               return S390X;
             default:
                 throw new IllegalArgumentException("can not determine architecture from [" + architecture + "]");
         }
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java b/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
index 2672405bbc5..77266b4f514 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java
@@ -35,7 +35,7 @@ import java.util.regex.Pattern;

 public class Jdk implements Buildable, Iterable<File> {

-    private static final List<String> ALLOWED_ARCHITECTURES = Collections.unmodifiableList(Arrays.asList("aarch64", "x64"));
+    private static final List<String> ALLOWED_ARCHITECTURES = Collections.unmodifiableList(Arrays.asList("aarch64", "x64", "s390x"));
     private static final List<String> ALLOWED_VENDORS = Collections.unmodifiableList(Arrays.asList("adoptopenjdk", "openjdk"));
     private static final List<String> ALLOWED_PLATFORMS = Collections.unmodifiableList(Arrays.asList("darwin", "linux", "windows", "mac"));
     private static final Pattern VERSION_PATTERN = Pattern.compile("(\\d+)(\\.\\d+\\.\\d+)?\\+(\\d+(?:\\.\\d+)?)(@([a-f0-9]{32}))?");
diff --git a/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java b/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
index 758aacbf90c..2591c401683 100644
--- a/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
+++ b/buildSrc/src/test/java/org/elasticsearch/gradle/JdkDownloadPluginTests.java
@@ -95,7 +95,7 @@ public class JdkDownloadPluginTests extends GradleUnitTestCase {
             "11.0.2+33",
             "linux",
             "unknown",
-            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64]"
+            "unknown architecture [unknown] for jdk [testjdk], must be one of [aarch64, x64, s390x]"
         );
     }

diff --git a/distribution/archives/build.gradle b/distribution/archives/build.gradle
index 71db3b2b359..d618c52b3a0 100644
--- a/distribution/archives/build.gradle
+++ b/distribution/archives/build.gradle
@@ -183,6 +183,12 @@ tasks.register('buildLinuxAarch64Tar', SymbolicLinkPreservingTar) {
   with archiveFiles(modulesFiles(false, 'linux'), 'tar', 'linux', 'aarch64', false, true)
 }

+tasks.register('buildLinuxS390xTar', SymbolicLinkPreservingTar) {
+  configure(commonTarConfig)
+  archiveClassifier = 'linux-s390x'
+  with archiveFiles(modulesFiles(false, 'linux'), 'tar', 'linux', 's390x', false, true)
+}
+
 tasks.register('buildLinuxTar', SymbolicLinkPreservingTar) {
   configure(commonTarConfig)
   archiveClassifier = 'linux-x86_64'
@@ -195,6 +201,12 @@ tasks.register('buildOssLinuxAarch64Tar', SymbolicLinkPreservingTar) {
   with archiveFiles(modulesFiles(true, 'linux'), 'tar', 'linux', 'aarch64', true, true)
 }

+tasks.register('buildOssLinuxS390xTar', SymbolicLinkPreservingTar) {
+  configure(commonTarConfig)
+  archiveClassifier = 'linux-s390x'
+  with archiveFiles(modulesFiles(true, 'linux'), 'tar', 'linux', 's390x', true, true)
+}
+
 tasks.register('buildOssLinuxTar', SymbolicLinkPreservingTar) {
   configure(commonTarConfig)
   archiveClassifier = 'linux-x86_64'
diff --git a/distribution/build.gradle b/distribution/build.gradle
index 13c8399268c..98bffbc0a4f 100644
--- a/distribution/build.gradle
+++ b/distribution/build.gradle
@@ -249,7 +249,7 @@ configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
   // Setup all required JDKs
   project.jdks {
     ['darwin', 'windows', 'linux'].each { platform ->
-      (platform == 'linux' ? ['x64', 'aarch64'] : ['x64']).each { architecture ->
+      (platform == 'linux' ? ['x64', 's390x', 'aarch64'] : ['x64']).each { architecture ->
         "bundled_${platform}_${architecture}" {
           it.platform = platform
           it.version = VersionProperties.getBundledJdk(platform)
@@ -619,12 +619,15 @@ subprojects {
 ['archives:windows-zip', 'archives:oss-windows-zip',
   'archives:darwin-tar', 'archives:oss-darwin-tar',
   'archives:linux-aarch64-tar', 'archives:oss-linux-aarch64-tar',
+  'archives:linux-s390x-tar', 'archives:oss-linux-s390x-tar',
   'archives:linux-tar', 'archives:oss-linux-tar',
   'archives:integ-test-zip',
   'packages:rpm', 'packages:deb',
   'packages:aarch64-rpm', 'packages:aarch64-deb',
+  'packages:s390x-rpm', 'packages:s390x-deb',
   'packages:oss-rpm', 'packages:oss-deb',
-  'packages:aarch64-oss-rpm', 'packages:aarch64-oss-deb'
+  'packages:aarch64-oss-rpm', 'packages:aarch64-oss-deb',
+  'packages:s390x-oss-rpm', 'packages:s390x-oss-deb'
 ].forEach { subName ->
   Project subproject = project("${project.path}:${subName}")
   Configuration configuration = configurations.create(subproject.name)
diff --git a/distribution/docker/build.gradle b/distribution/docker/build.gradle
index c9ecceac110..51931f90cf5 100644
--- a/distribution/docker/build.gradle
+++ b/distribution/docker/build.gradle
@@ -15,15 +15,19 @@ testFixtures.useFixture()
 configurations {
   dockerPlugins
   aarch64DockerSource
+  s390xDockerSource
   dockerSource
   aarch64OssDockerSource
+  s390xOssDockerSource
   ossDockerSource
 }

 dependencies {
   aarch64DockerSource project(path: ":distribution:archives:linux-aarch64-tar")
+  s390xDockerSource project(path: ":distribution:archives:linux-s390x-tar")
   dockerSource project(path: ":distribution:archives:linux-tar")
   aarch64OssDockerSource project(path: ":distribution:archives:oss-linux-aarch64-tar")
+  s390xOssDockerSource project(path: ":distribution:archives:oss-linux-s390x-tar")
   ossDockerSource project(path: ":distribution:archives:oss-linux-tar")
 }

@@ -37,13 +41,18 @@ ext.expansions = { architecture, oss, local ->
       tini_arch = "arm64"
       classifier = "linux-aarch64"
       break;
+    case "s390x":
+      base_image = "registry.access.redhat.com/ubi8/ubi:8.2"
+      tini_arch = "s390x"
+      classifier = "linux-s390x"
+      break;
     case "x64":
       base_image = "amd64/centos:7"
       tini_arch = "amd64"
       classifier = "linux-x86_64"
       break;
     default:
-      throw new IllegalArgumentException("unrecongized architecture [" + architecture + "], must be one of (aarch64|x64)")
+      throw new IllegalArgumentException("unrecongized architecture [" + architecture + "], must be one of (aarch64|s390x|x64)")
   }
   final String elasticsearch = oss ? "elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz" : "elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz"
   return [
@@ -59,11 +68,11 @@ ext.expansions = { architecture, oss, local ->
 }

 private static String buildPath(final String architecture, final boolean oss) {
-  return "build/${"aarch64".equals(architecture) ? 'aarch64-' : ''}${oss ? 'oss-' : ''}docker"
+  return "build/${"aarch64".equals(architecture) ? 'aarch64-' : "s390x".equals(architecture) ? 's390x-' : ''}${oss ? 'oss-' : ''}docker"
 }

 private static String taskName(final String prefix, final String architecture, final boolean oss, final String suffix) {
-  return "${prefix}${"aarch64".equals(architecture) ? 'Aarch64' : ''}${oss ? 'Oss' : ''}${suffix}"
+  return "${prefix}${"aarch64".equals(architecture) ? 'Aarch64' : "s390x".equals(architecture) ? 'S390x-' : ''}${oss ? 'Oss' : ''}${suffix}"
 }

 project.ext {
@@ -106,6 +115,12 @@ void addCopyDockerContextTask(final String architecture, final boolean oss) {
       } else {
         from configurations.aarch64DockerSource
       }
+    } else if ("s390x".equals(architecture)) {
+      if (oss) {
+        from configurations.s390xOssDockerSource
+      } else {
+        from configurations.s390xDockerSource
+      }
     } else {
       if (oss) {
         from configurations.ossDockerSource
@@ -139,7 +154,7 @@ task copyKeystore(type: Sync) {
 elasticsearch_distributions {
   Architecture.values().each { eachArchitecture ->
     Flavor.values().each { distroFlavor ->
-      "docker_$distroFlavor${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : '' }" {
+     "docker_$distroFlavor${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : eachArchitecture == Architecture.S390X ? '_s390x' : '' }" {
         architecture = eachArchitecture
         flavor = distroFlavor
         type = 'docker'
@@ -207,7 +222,7 @@ void addBuildDockerImage(final String architecture, final boolean oss) {
   assemble.dependsOn(buildDockerImageTask)
 }

-for (final String architecture : ["aarch64", "x64"]) {
+for (final String architecture : ["aarch64", "s390x", "x64"]) {
   for (final boolean oss : [false, true]) {
     addCopyDockerContextTask(architecture, oss)
     addBuildDockerImage(architecture, oss)
@@ -229,12 +244,12 @@ subprojects { Project subProject ->
   if (subProject.name.endsWith('-export')) {
     apply plugin: 'distribution'

-    final String architecture = subProject.name.contains('aarch64-') ? 'aarch64' : 'x64'
+    final String architecture = subProject.name.contains('aarch64-') ? 'aarch64' : subProject.name.contains('s390x-') ? 's390x' : 'x64'
     final boolean oss = subProject.name.contains('oss-')

     def exportTaskName = taskName("export", architecture, oss, "DockerImage")
     def buildTaskName = taskName("build", architecture, oss, "DockerImage")
-    def tarFile = "${parent.projectDir}/build/elasticsearch${"aarch64".equals(architecture) ? '-aarch64' : ''}${oss ? '-oss' : ''}_test.${VersionProperties.elasticsearch}.docker.tar"
+    def tarFile = "${parent.projectDir}/build/elasticsearch${"aarch64".equals(architecture) ? '-aarch64' : "s390x".equals(architecture) ? '-s390x' : ''}${oss ? '-oss' : ''}_test.${VersionProperties.elasticsearch}.docker.tar"

     final Task exportDockerImageTask = task(exportTaskName, type: LoggedExec) {
       inputs.file("${parent.projectDir}/build/markers/${buildTaskName}.marker")
@@ -252,7 +267,7 @@ subprojects { Project subProject ->

     artifacts.add('default', file(tarFile)) {
       type 'tar'
-      name "elasticsearch${"aarch64".equals(architecture) ? '-aarch64' : ''}${oss ? '-oss' : ''}"
+      name "elasticsearch${"aarch64".equals(architecture) ? '-aarch64' : "s390x".equals(architecture) ? '-s390x' : ''}${oss ? '-oss' : ''}"
       builtBy exportTaskName
     }

diff --git a/distribution/packages/build.gradle b/distribution/packages/build.gradle
index b26d26f8ae9..868850800c3 100644
--- a/distribution/packages/build.gradle
+++ b/distribution/packages/build.gradle
@@ -108,6 +108,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
     if (type == 'deb') {
       if (architecture == 'x64') {
         arch('amd64')
+      } else if (architecture == 's390x') {
+        arch('s390x')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('arm64')
@@ -116,6 +118,8 @@ Closure commonPackageConfig(String type, boolean oss, boolean jdk, String archit
       assert type == 'rpm' : type
       if (architecture == 'x64') {
         arch('X86_64')
+      } else if (architecture == 's390x') {
+        arch('s390x')
       } else {
         assert architecture == 'aarch64' : architecture
         arch('aarch64')
@@ -355,6 +359,10 @@ tasks.register('buildAarch64Deb', Deb) {
   configure(commonDebConfig(false, true, 'aarch64'))
 }

+tasks.register('buildS390xDeb', Deb) {
+  configure(commonDebConfig(false, true, 's390x'))
+}
+
 tasks.register('buildDeb', Deb) {
   configure(commonDebConfig(false, true, 'x64'))
 }
@@ -363,6 +371,10 @@ tasks.register('buildAarch64OssDeb', Deb) {
   configure(commonDebConfig(true, true, 'aarch64'))
 }

+tasks.register('buildS390xOssDeb', Deb) {
+  configure(commonDebConfig(true, true, 's390x'))
+}
+
 tasks.register('buildOssDeb', Deb) {
   configure(commonDebConfig(true, true, 'x64'))
 }
@@ -408,6 +420,10 @@ tasks.register('buildAarch64Rpm', Rpm) {
   configure(commonRpmConfig(false, true, 'aarch64'))
 }

+tasks.register('buildS390xRpm', Rpm) {
+  configure(commonRpmConfig(false, true, 's390x'))
+}
+
 tasks.register('buildRpm', Rpm) {
   configure(commonRpmConfig(false, true, 'x64'))
 }
@@ -416,6 +432,10 @@ tasks.register('buildAarch64OssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'aarch64'))
 }

+tasks.register('buildS390xOssRpm', Rpm) {
+  configure(commonRpmConfig(true, true, 's390x'))
+}
+
 tasks.register('buildOssRpm', Rpm) {
   configure(commonRpmConfig(true, true, 'x64'))
 }
diff --git a/settings.gradle b/settings.gradle
index bb876713ad5..318a35b2c58 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -28,8 +28,10 @@ List projects = [
   'distribution:archives:oss-no-jdk-darwin-tar',
   'distribution:archives:no-jdk-darwin-tar',
   'distribution:archives:oss-linux-aarch64-tar',
+  'distribution:archives:oss-linux-s390x-tar',
   'distribution:archives:oss-linux-tar',
   'distribution:archives:linux-aarch64-tar',
+  'distribution:archives:linux-s390x-tar',
   'distribution:archives:linux-tar',
   'distribution:archives:oss-no-jdk-linux-tar',
   'distribution:archives:no-jdk-linux-tar',
@@ -38,19 +40,27 @@ List projects = [
   'distribution:docker:docker-aarch64-export',
   'distribution:docker:oss-docker-aarch64-build-context',
   'distribution:docker:oss-docker-aarch64-export',
+  'distribution:docker:docker-s390x-build-context',
+  'distribution:docker:docker-s390x-export',
+  'distribution:docker:oss-docker-s390x-build-context',
+  'distribution:docker:oss-docker-s390x-export',
   'distribution:docker:docker-build-context',
   'distribution:docker:docker-export',
   'distribution:docker:oss-docker-build-context',
   'distribution:docker:oss-docker-export',
   'distribution:packages:aarch64-oss-deb',
+  'distribution:packages:s390x-oss-deb',
   'distribution:packages:oss-deb',
   'distribution:packages:aarch64-deb',
+  'distribution:packages:s390x-deb',
   'distribution:packages:deb',
   'distribution:packages:oss-no-jdk-deb',
   'distribution:packages:no-jdk-deb',
   'distribution:packages:aarch64-oss-rpm',
+  'distribution:packages:s390x-oss-rpm',
   'distribution:packages:oss-rpm',
   'distribution:packages:aarch64-rpm',
+  'distribution:packages:s390x-rpm',
   'distribution:packages:rpm',
   'distribution:packages:oss-no-jdk-rpm',
   'distribution:packages:no-jdk-rpm',
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java
index 4dc554960b2..87e4b5ec35d 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java
@@ -73,10 +73,10 @@ public class XPackSettings {
     /** Setting for enabling or disabling machine learning. Defaults to true. */
     public static final Setting<Boolean> MACHINE_LEARNING_ENABLED = Setting.boolSetting(
         "xpack.ml.enabled",
-        "aarch64".equals(System.getProperty("os.arch")) ? false : true,
+        "aarch64".equals(System.getProperty("os.arch")) ? false : "s390x".equals(System.getProperty("os.arch")) ? false : true,
         value -> {
-            if (value && "aarch64".equals(System.getProperty("os.arch"))) {
-                throw new IllegalArgumentException("[xpack.ml.enabled] can not be set to [true] on [aarch64]");
+            if (value && ("aarch64".equals(System.getProperty("os.arch")) || "s390x".equals(System.getProperty("os.arch")))) {
+                throw new IllegalArgumentException("[xpack.ml.enabled] can not be set to [true] on [aarch64, s390x]");
             }
         },
         Setting.Property.NodeScope);
