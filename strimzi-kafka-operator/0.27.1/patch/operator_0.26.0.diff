diff --git a/docker-images/base/Dockerfile b/docker-images/base/Dockerfile
index 19088623e..110bc3e23 100644
--- a/docker-images/base/Dockerfile
+++ b/docker-images/base/Dockerfile
@@ -17,6 +17,7 @@ ENV TINI_VERSION v0.19.0
 ENV TINI_SHA256_AMD64=93dcc18adc78c65a028a84799ecf8ad40c936fdfc5f2a57b1acda5a8117fa82c
 ENV TINI_SHA256_ARM64=07952557df20bfd2a95f9bef198b445e006171969499a1d361bd9e6f8e5e0e81
 ENV TINI_SHA256_PPC64LE=3f658420974768e40810001a038c29d003728c5fe86da211cff5059e48cfdfde
+ENV TINI_SHA256_S390X=931b70a182af879ca249ae9de87ef68423121b38d235c78997fafc680ceab32d
 
 RUN echo $TARGETPLATFORM
 
@@ -29,6 +30,10 @@ RUN set -ex; \
         curl -s -L https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-arm64 -o /usr/bin/tini; \
         echo "${TINI_SHA256_ARM64} */usr/bin/tini" | sha256sum -c; \
         chmod +x /usr/bin/tini; \
+    elif [[ ${TARGETPLATFORM} = "linux/s390x" ]]; then \
+        curl -s -L https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-s390x -o /usr/bin/tini; \
+        echo "${TINI_SHA256_S390X} */usr/bin/tini" | sha256sum -c; \
+        chmod +x /usr/bin/tini; \
     else \
         curl -s -L https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini -o /usr/bin/tini; \
         echo "${TINI_SHA256_AMD64} */usr/bin/tini" | sha256sum -c; \
diff --git a/docker-images/build.sh b/docker-images/build.sh
index 9d4adb1a2..b766edff1 100755
--- a/docker-images/build.sh
+++ b/docker-images/build.sh
@@ -118,6 +118,16 @@ function fetch_and_unpack_kafka_binaries {
         echo "Unpacking binary archive"
         tar xvfz "$binary_file_path" -C "$dist_dir" --strip-components=1
 
+        # Override jni jars with s390x version binary
+        if [[ -f "$dist_dir/libs/rocksdbjni-5.18.4.jar" ]]
+        then
+            cp -f /tmp/opertemp/libs/rocksdbjni-5.18.4.jar $dist_dir/libs/
+        fi
+        if [[ -f "$dist_dir/libs/rocksdbjni-6.19.3.jar" ]]
+        then
+            cp -f /tmp/opertemp/libs/rocksdbjni-6.19.3.jar $dist_dir/libs/
+        fi
+
         # Store the folder address for use in the image build 
         version_dist_dirs["$kafka_version"]="./tmp/$kafka_version"
 
diff --git a/docker-images/kafka/Dockerfile b/docker-images/kafka/Dockerfile
index 1b6dcfbab..891e315a0 100644
--- a/docker-images/kafka/Dockerfile
+++ b/docker-images/kafka/Dockerfile
@@ -31,6 +31,7 @@ ENV KAFKA_EXPORTER_VERSION=1.4.2
 ENV KAFKA_EXPORTER_CHECKSUM_AMD64="42fcd2b303e82e3ea518cffe7c528c2c35f9ecace8427d68f556c8a91894056f9d8a84fb5bdac2c447b91870909f0dbcce5548a061149da4ffbf33e16545d488  kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-amd64.tar.gz"
 ENV KAFKA_EXPORTER_CHECKSUM_ARM64="9488d558210834a6e99ab0c26513294fe2e9f6bd95257fa56cd48359fbadcb5b8aa0846d12c58dbccbfb8493f525c55004a2a0e2a539eb594371ff1990c516f0  kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-arm64.tar.gz"
 ENV KAFKA_EXPORTER_CHECKSUM_PPC64LE="26648800bd2da699cc4e6bfca475b1bcfee0b2271c1c5a531941d42aea42ed55f8d8fdb103e517b7a8c504798c5b5fc6854e099a1a22b7069b319aecf5d410d2  kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-ppc64le.tar.gz"
+ENV KAFKA_EXPORTER_CHECKSUM_S390X="4d06cb65f79fadeeb53782614482dc1f1639ae01a6baf241b8e583ef2a4ba1fc66b7ea538da48a9530ee4231c39deb873585aa68202646bf6fd1187c71d147d0  kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz"
 
 RUN set -ex; \
     if [[ ${TARGETPLATFORM} = "linux/arm64" ]]; then \
@@ -47,6 +48,13 @@ RUN set -ex; \
         mkdir $KAFKA_EXPORTER_HOME; \
         tar xvfz kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-ppc64le.tar.gz -C $KAFKA_EXPORTER_HOME --strip-components=1; \
         rm -f kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-ppc64le.tar.gz*; \
+    elif [[ ${TARGETPLATFORM} = "linux/s390x" ]]; then \
+        curl -LO https://github.com/danielqsj/kafka_exporter/releases/download/v${KAFKA_EXPORTER_VERSION}/kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz; \
+        echo $KAFKA_EXPORTER_CHECKSUM_S390X > kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz.sha512; \
+        sha512sum --check kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz.sha512; \
+        mkdir $KAFKA_EXPORTER_HOME; \
+        tar xvfz kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz -C $KAFKA_EXPORTER_HOME --strip-components=1; \
+        rm -f kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-s390x.tar.gz*; \
     else \
         curl -LO https://github.com/danielqsj/kafka_exporter/releases/download/v${KAFKA_EXPORTER_VERSION}/kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-amd64.tar.gz; \
         echo $KAFKA_EXPORTER_CHECKSUM_AMD64 > kafka_exporter-${KAFKA_EXPORTER_VERSION}.linux-amd64.tar.gz.sha512; \
diff --git a/docker-images/kaniko-executor/Makefile b/docker-images/kaniko-executor/Makefile
index 9c846c1ed..da6aa7479 100644
--- a/docker-images/kaniko-executor/Makefile
+++ b/docker-images/kaniko-executor/Makefile
@@ -1,11 +1,11 @@
 PROJECT_NAME := kaniko-executor
-KANIKO_EXECUTOR = gcr.io/kaniko-project/executor:v1.6.0
+KANIKO_EXECUTOR = local/kaniko-project/executor:v1.6.0
 
 docker_build:
 	# The Kaniko executor image used for building new Kafka Connect images with additional connectors is not build from
 	# scratch. We just pull the one released by Kaniko, retag it and push it to our repository to have our versioning on
 	# it and have it stored there in our other images.
-	$(DOCKER_CMD) pull $(KANIKO_EXECUTOR)
+	# $(DOCKER_CMD) pull $(KANIKO_EXECUTOR)
 	$(DOCKER_CMD) tag $(KANIKO_EXECUTOR) strimzi/$(PROJECT_NAME):latest
 	$(DOCKER_CMD) tag $(KANIKO_EXECUTOR) strimzi/$(PROJECT_NAME):$(BUILD_TAG)
 
diff --git a/docker-images/operator/Makefile b/docker-images/operator/Makefile
index b314974c2..edd0bd430 100644
--- a/docker-images/operator/Makefile
+++ b/docker-images/operator/Makefile
@@ -32,7 +32,10 @@ clean:
 	unzip -qo $(cluster_operator_dist) -d tmp
 	touch .cluster-operator.tmp
 
-docker_build: .topic-operator.tmp .user-operator.tmp .kafka-init.tmp .cluster-operator.tmp docker_build_default
+.jni-jars.tmp: tmp
+	cp -f /tmp/opertemp/libs/rocksdbjni-6.19.3.jar tmp/lib/org.rocksdb.rocksdbjni-6.19.3.jar
+
+docker_build: .topic-operator.tmp .user-operator.tmp .kafka-init.tmp .cluster-operator.tmp .jni-jars.tmp docker_build_default
 	# Pull dependencies first
 
 include ../../Makefile.docker
